{"version":3,"sources":["components/Costa_Rica_Historic.js","components/Nicaragua_Historic.js","components/Mexico_Historic.js","components/El_Salvador_Historic.js","components/Globe.js","components/DateTimePicker.js","components/NavBar.js","pages/LandingPage.js","images/Max.jpg","images/Vitaliy.jpeg","images/Andre.jpeg","images/Naoki.jpg","pages/About.js","pages/ExportData.js","App.js","index.js","components/DateToWeek.js"],"names":["Costa_Rica_Historic","x","y","hydro","wind","solar","thermal","other","interchange","data","this","props","dataFromParent","start","startDate","end","endDate","className","keys","Object","getOwnPropertyNames","sort","a","b","str_to_date","i","length","dateVal","push","k","type","value","stackgroup","marker","color","name","layout","width","height","yaxis","title","gridcolor","xaxis","showticklabels","plot_bgcolor","paper_bgcolor","font","React","Component","Nicaragua_Historic","Mexico_Historic","internal_combustion","nuclear_power","biomass","turbo_gas","geothermalelectric","El_Salvador_Historic","geothermal","solar_push","SimpleGlobe","state","globe","initialCameraDistanceRadiusScale","globeBackgroundTexture","globeCloudsTexture","globeTexture","initialCoordinates","markers","options","onClickMarker","markerClick","onGlobeTextureLoaded","console","log","DateRangePickerExample","changeStartDate","changeEndDate","onStartDateChange","date","onEndDateChange","minimumLength","format","locale","enGB","startDateInputProps","endDateInputProps","focus","START_DATE","placeholder","END_DATE","NavBar","activeClassName","exact","to","require","date_to_stringUS","date_to_string","date_to_weekUS","date_to_week","axios","date_to_weekJS","LandingPage","today","Date","setDate","getDate","dateParts","toLocaleDateString","split","getFullYear","getMonth","loading","fetchingData","clicked","volume","globe_markers","id","country","coordinates","globe_options","ambientLightColor","ambientLightIntensity","enableDefocus","cameraRotateSpeed","cameraZoomSpeed","cameraAutoRotateSpeed","focusAnimationDuration","focusDistanceRadiusScale","focusEasingFunction","globeGlowPower","globeCloudsOpacity","enableMarkerGlow","markerGlowCoefficient","markerGlowPower","pointLightColor","pointLightIntensity","pointLightPositionRadiusScales","markerType","markerTooltipRenderer","country_data","bind","markerObject","event","setState","audio","Audio","play","country_id","queryData","country_string","start_date","end_date","config","body","date_range","post","res","status","copy","hist","forecast","getGlobe","DateTimePicker","src","controls","autoPlay","loop","muted","onVolumeChanged","e","volumeChangeEvent","graph","About","content","dangerouslySetInnerHTML","__html","style","textAlign","Max","alt","Vitaliy","Naoki","Andre","ExportData","App","basename","process","path","component","ReactDOM","render","document","getElementById","module","exports","date_str","current","diffTime","Math","abs","diffDays","ceil","year","Intl","DateTimeFormat","month","day","dd","String","padStart","err","string","hh","parseInt","date_split","mm","yyyy"],"mappings":"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","file":"static/js/main.04ef3137.chunk.js","sourcesContent":["import {str_to_date} from './DateToWeek';\r\nimport React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class Costa_Rica_Historic extends React.Component {\r\n\r\n    render() {\r\n\r\n        let x = [];\r\n        let y = [];\r\n        let hydro = [];\r\n        let wind = [];\r\n        let solar = [];\r\n        let thermal = [];\r\n        let other = [];\r\n        let interchange = [];\r\n\r\n       var data = this.props.dataFromParent['Historic'];\r\n       var start = this.props.startDate;\r\n       var end = this.props.endDate;\r\n\r\n        if(data){\r\n            var keys = Object.getOwnPropertyNames(data);\r\n            keys.sort(function(a, b){\r\n                return str_to_date(a) - str_to_date(b);\r\n            });\r\n\r\n            for(let i = 0; i < keys.length; ++i){\r\n                let dateVal = str_to_date(keys[i]);\r\n                if (dateVal < start || dateVal > end){\r\n                    continue;\r\n                }\r\n                x.push(keys[i]);\r\n            }\r\n\r\n            for(let k of keys){\r\n                let dateVal = str_to_date(k);\r\n                if (dateVal < start || dateVal > end){\r\n                    continue;\r\n                }\r\n                y.push(data[k]);\r\n            }\r\n\r\n            for(let k of y){\r\n                for(let i of k){\r\n                    if(i.type === 'Hydroelectric'){\r\n                        hydro.push(i.value)\r\n                    }\r\n                    if(i.type === 'Interchange'){\r\n                        interchange.push(i.value)\r\n                    }\r\n                    if(i.type === 'Other'){\r\n                        other.push(i.value)\r\n                    }\r\n                    if(i.type === 'Solar'){\r\n                        solar.push(i.value)\r\n                    }\r\n                    if(i.type === 'Thermal'){\r\n                        thermal.push(i.value)\r\n                    }\r\n                    if(i.type === 'Wind'){\r\n                        wind.push(i.value)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return <div className=\"country-plotly\">Loading...</div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-plotly\">\r\n                <Plot\r\n                    data={[\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'orange'},\r\n                            name: 'other',\r\n                            x: x,\r\n                            y: other\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'red'},\r\n                            name: 'thermal',\r\n                            x: x,\r\n                            y: thermal\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'yellow'},\r\n                            name: 'solar',\r\n                            x: x,\r\n                            y: solar,\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'black'},\r\n                            name: 'interchange',\r\n                            x: x,\r\n                            y: interchange,\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'cyan'},\r\n                            name: 'wind',\r\n                            x: x,\r\n                            y: wind\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'blue'},\r\n                            name: 'hydro',\r\n                            x: x,\r\n                            y: hydro,\r\n                        },\r\n\r\n                    ]}\r\n                    layout={ \r\n                        {\r\n                            width: 800, \r\n                            height: 500,\r\n                            yaxis:{\r\n                                title: \"MWh\",\r\n                                // showticklabels: false,\r\n                                gridcolor: \"#FFFFFF55\"\r\n                            },\r\n                            xaxis:{\r\n                                title: \"Time (HH-dd/mm/yyyy)\",\r\n                                showticklabels: false,\r\n                                gridcolor: \"#FFFFFF55\"\r\n                            },\r\n                            plot_bgcolor:\"#FFFFFF99\",\r\n                            paper_bgcolor:\"#00000000\",\r\n                            font: \r\n                                {\r\n                                    color: \"#FFFFFF\",\r\n                                },\r\n                            title: 'Costa Rica Historic'\r\n                        }\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport {str_to_date} from './DateToWeek';\r\n\r\nexport default class Nicaragua_Historic extends React.Component {\r\n\r\n    render() {\r\n\r\n        let x = [];\r\n        let y = [];\r\n        let hydro = [];\r\n        let wind = [];\r\n        let solar = [];\r\n        let thermal = [];\r\n        let other = [];\r\n        let interchange = [];\r\n\r\n        var data = this.props.dataFromParent['Historic'];\r\n        var start = this.props.startDate;\r\n        var end = this.props.endDate;\r\n \r\n         if(data){\r\n             var keys = Object.getOwnPropertyNames(data);\r\n             keys.sort(function(a, b){\r\n                 return str_to_date(a) - str_to_date(b);\r\n             });\r\n \r\n             for(let i = 0; i < keys.length; ++i){\r\n                 let dateVal = str_to_date(keys[i]);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 x.push(keys[i]);\r\n             }\r\n \r\n             for(let k of keys){\r\n                 let dateVal = str_to_date(k);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 y.push(data[k]);\r\n             }\r\n\r\n            for(let k of y){\r\n                for(let i of k){\r\n                    if(i.type === 'HYDRO'){\r\n                        hydro.push(i.value)\r\n                    }\r\n                    if(i.type === 'INTERCHANGE'){\r\n                        interchange.push(i.value)\r\n                    }\r\n                    if(i.type === 'Other'){\r\n                        other.push(i.value)\r\n                    }\r\n                    if(i.type === 'SOLAR'){\r\n                        solar.push(i.value)\r\n                    }\r\n                    if(i.type === 'THERMAL'){\r\n                        thermal.push(i.value)\r\n                    }\r\n                    if(i.type === 'WIND'){\r\n                        wind.push(i.value)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return <div className=\"country-plotly\">Loading...</div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-plotly\">\r\n                <Plot\r\n                    data={[\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'black'},\r\n                            name: 'interchange',\r\n                            x: x,\r\n                            y: interchange,\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'yellow'},\r\n                            name: 'solar',\r\n                            x: x,\r\n                            y: solar,\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'blue'},\r\n                            name: 'hydro',\r\n                            x: x,\r\n                            y: hydro,\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'cyan'},\r\n                            name: 'wind',\r\n                            x: x,\r\n                            y: wind\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'red'},\r\n                            name: 'thermal',\r\n                            x: x,\r\n                            y: thermal\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'orange'},\r\n                            name: 'other',\r\n                            x: x,\r\n                            y: other\r\n                        },\r\n\r\n                    ]}\r\n                    layout={{\r\n                        width: 800, \r\n                        height: 500,\r\n                        yaxis:{\r\n                            title: \"MWh\",\r\n                            // showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        xaxis:{\r\n                            title: \"Time (HH-dd/mm/yyyy)\",\r\n                            showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        plot_bgcolor:\"#FFFFFF99\",\r\n                        paper_bgcolor:\"#00000000\",\r\n                        font: \r\n                            {\r\n                                color: \"#FFFFFF\",\r\n                            },\r\n                        title: 'Nicaragua Historic'\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport {str_to_date} from './DateToWeek';\r\n\r\nexport default class Mexico_Historic extends React.Component {\r\n    render() {\r\n\r\n        let x = [];\r\n        let y = [];\r\n        let hydro = [];\r\n        let wind = [];\r\n        let thermal = [];\r\n        let internal_combustion = [];\r\n        let nuclear_power = [];\r\n        let biomass = [];\r\n        let turbo_gas = [];\r\n        let geothermalelectric = [];\r\n\r\n        var data = this.props.dataFromParent['Historic'];\r\n        var start = this.props.startDate;\r\n        var end = this.props.endDate;\r\n \r\n         if(data){\r\n             var keys = Object.getOwnPropertyNames(data);\r\n             keys.sort(function(a, b){\r\n                 return str_to_date(a) - str_to_date(b);\r\n             });\r\n \r\n             for(let i = 0; i < keys.length; ++i){\r\n                 let dateVal = str_to_date(keys[i]);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 x.push(keys[i]);\r\n             }\r\n \r\n             for(let k of keys){\r\n                 let dateVal = str_to_date(k);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 y.push(data[k]);\r\n             }\r\n\r\n            for(let k of y){\r\n                for(let i of k){\r\n                    if(i.type === 'HydroElectric'){\r\n                        hydro.push(i.value)\r\n                    }\r\n                    if(i.type === 'Internal Combustion'){\r\n                        internal_combustion.push(i.value)\r\n                    }\r\n                    if(i.type === 'Conventional Thermal'){\r\n                        thermal.push(i.value)\r\n                    }\r\n                    if(i.type === 'Wind'){\r\n                        wind.push(i.value)\r\n                    }\r\n                    if(i.type === 'Biomass'){\r\n                        biomass.push(i.value)\r\n                    }\r\n                    if(i.type === 'Nuclear Power'){\r\n                        nuclear_power.push(i.value)\r\n                    }\r\n                    if(i.type === 'Turbo Gas'){\r\n                        turbo_gas.push(i.value)\r\n                    }\r\n                    if(i.type === 'Geothermalelectric'){\r\n                        geothermalelectric.push(i.value)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return <div className=\"country-plotly\">Loading...</div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-plotly\">\r\n                <Plot\r\n                    data={[\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'blue'},\r\n                            name: 'hydro',\r\n                            x: x,\r\n                            y: hydro,\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'black'},\r\n                            name: 'internal combustion',\r\n                            x: x,\r\n                            y: internal_combustion,\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'red'},\r\n                            name: 'thermal',\r\n                            x: x,\r\n                            y: thermal\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'cyan'},\r\n                            name: 'wind',\r\n                            x: x,\r\n                            y: wind\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'orange'},\r\n                            name: 'biomass',\r\n                            x: x,\r\n                            y: biomass\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'yellow'},\r\n                            name: 'nuclear power',\r\n                            x: x,\r\n                            y: nuclear_power\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'pink'},\r\n                            name: 'turbo gas',\r\n                            x: x,\r\n                            y: turbo_gas\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'green'},\r\n                            name: 'geothermal electric',\r\n                            x: x,\r\n                            y: geothermalelectric\r\n                        },\r\n\r\n                    ]}\r\n                    layout={{\r\n                        width: 800, \r\n                        height: 500,\r\n                        yaxis:{\r\n                            title: \"MWh\",\r\n                            // showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        xaxis:{\r\n                            title: \"Time (HH-dd/mm/yyyy)\",\r\n                            showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        plot_bgcolor:\"#FFFFFF99\",\r\n                        paper_bgcolor:\"#00000000\",\r\n                        font: \r\n                            {\r\n                                color: \"#FFFFFF\",\r\n                            },\r\n                        title: 'Mexico Historic'\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {str_to_date} from './DateToWeek';\r\nimport Plot from 'react-plotly.js';\r\n\r\nexport default class El_Salvador_Historic extends React.Component {\r\n\r\n    render() {\r\n\r\n        let x = [];\r\n        let y = [];\r\n        let hydro = [];\r\n        let wind = [];\r\n        let solar = [];\r\n        let thermal = [];\r\n        let other = [];\r\n        let interchange = [];\r\n        let biomass = [];\r\n        let geothermal = [];\r\n\r\n        var data = this.props.dataFromParent['Historic'];\r\n        var start = this.props.startDate;\r\n        var end = this.props.endDate;\r\n \r\n         if(data){\r\n             var keys = Object.getOwnPropertyNames(data);\r\n             keys.sort(function(a, b){\r\n                 return str_to_date(a) - str_to_date(b);\r\n             });\r\n \r\n             for(let i = 0; i < keys.length; ++i){\r\n                 let dateVal = str_to_date(keys[i]);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 x.push(keys[i]);\r\n             }\r\n \r\n             for(let k of keys){\r\n                 let dateVal = str_to_date(k);\r\n                 if (dateVal < start || dateVal > end){\r\n                     continue;\r\n                 }\r\n                 y.push(data[k]);\r\n             }\r\n\r\n            for(let k of y){\r\n                let solar_push = false\r\n                for(let i of k){\r\n                    if(i.type === 'HydroElectric'){\r\n                        hydro.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Interconnection'){\r\n                        interchange.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Other'){\r\n                        other.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Thermal'){\r\n                        thermal.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Wind'){\r\n                        wind.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Biomass'){\r\n                        biomass.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Geothermal'){\r\n                        geothermal.push(i.value)\r\n                    }\r\n                    else if(i.type === 'Solar'){\r\n                        solar.push(i.value);\r\n                        solar_push = true;\r\n                    }\r\n                }\r\n                if (!solar_push){\r\n                    solar.push(0);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            return <div className=\"country-plotly\">Loading...</div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"country-plotly\">\r\n                <Plot\r\n                    data={[\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'cyan'},\r\n                            name: 'wind',\r\n                            x: x,\r\n                            y: wind\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'green'},\r\n                            name: 'biomass',\r\n                            x: x,\r\n                            y: biomass\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'orange'},\r\n                            name: 'geothermal',\r\n                            x: x,\r\n                            y: geothermal\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'yellow'},\r\n                            name: 'solar',\r\n                            x: x,\r\n                            y: solar,\r\n                        },\r\n                        {\r\n\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'red'},\r\n                            name: 'thermal',\r\n                            x: x,\r\n                            y: thermal\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'black'},\r\n                            name: 'interchange',\r\n                            x: x,\r\n                            y: interchange,\r\n                        },\r\n                        {\r\n                            type: 'line',\r\n                            stackgroup: 'one',\r\n                            marker: {color: 'blue'},\r\n                            name: 'hydro',\r\n                            x: x,\r\n                            y: hydro,\r\n                        },\r\n\r\n                    ]}\r\n                    layout={{\r\n                        width: 800, \r\n                        height: 500,\r\n                        yaxis:{\r\n                            title: \"MWh\",\r\n                            // showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        xaxis:{\r\n                                title: \"Time (HH-dd/mm/yyyy)\",\r\n                            showticklabels: false,\r\n                            gridcolor: \"#FFFFFF55\"\r\n                        },\r\n                        plot_bgcolor:\"#FFFFFF99\",\r\n                        paper_bgcolor:\"#00000000\",\r\n                        font: \r\n                            {\r\n                                color: \"#FFFFFF\",\r\n                            },\r\n                        title: 'El Salvador Historic'\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactGlobe from 'react-globe';\r\n\r\n/*  IMPORTANT\r\n    it is worth noting that this demo only works with Three.js 0.118 thru 0.124\r\n    \r\n    There is a regex Dos (ReDos) vulnerability https://www.npmjs.com/advisories/1639 fixed in 0.125\r\n    soooo TL;DR don't let the user pick colors of the globe and we should be okay. \r\n*/\r\n\r\nexport class SimpleGlobe extends React.Component {\r\n    // support rendering markers with simple data\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            globe: null,\r\n        }\r\n    }\r\n\r\n    // simple component usage\r\n    getGlobe() { \r\n        return (\r\n            <ReactGlobe\r\n                initialCameraDistanceRadiusScale=\"3.25\"\r\n                //TODO we should download and copy these for our server to use\r\n                globeBackgroundTexture=\"https://raw.githubusercontent.com/chrisrzhou/react-globe/main/textures/background.png\"\r\n                globeCloudsTexture=\"https://raw.githubusercontent.com/chrisrzhou/react-globe/main/textures/clouds.png\"\r\n                globeTexture=\"https://raw.githubusercontent.com/chrisrzhou/react-globe/main/textures/globe.jpg\"\r\n                initialCoordinates={this.props.initialCoordinates}\r\n                markers={this.props.markers}\r\n                options={this.props.options}\r\n                onClickMarker={this.props.markerClick}\r\n                // onGetGlobe={(globe) => this.setState({globe: globe})}\r\n                // onMouseOutMarker={(marker, markerObject, event) => console.log(marker, markerObject, event)}\r\n                onGlobeTextureLoaded={() => console.log('globe loaded')}\r\n                // onMouseOverMarker={(marker, markerObject, event) => console.log(marker, markerObject, event)}\r\n            />\r\n        )\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { enGB } from 'date-fns/locale'\r\nimport { DateRangePicker, START_DATE, END_DATE } from 'react-nice-dates'\r\nimport 'react-nice-dates/build/style.css'\r\n\r\n/*Add this as props to not be able to select past days and only from current day\r\n\r\nminimumDate={new Date()}\r\n\r\nSo we can click and drag or type or select date ranges.\r\nNeed hour filter?\r\n\r\n*/\r\n\r\nfunction DateRangePickerExample(startDate, endDate, changeStartDate, changeEndDate) {\r\n    return (\r\n        <div className=\"date-time-picker\">\r\n            <DateRangePicker\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                onStartDateChange={(date) => changeStartDate(date )}\r\n                onEndDateChange={(date) => changeEndDate(date)}\r\n                minimumLength={1}\r\n                format='MMMMMMMMMM dd, yyyy'\r\n                locale={enGB}\r\n            >\r\n                {({ startDateInputProps, endDateInputProps, focus }) => (\r\n                    <div className='date-range'>\r\n                        <input\r\n                            className={'input' + (focus === START_DATE ? ' -focused' : '')}\r\n                            {...startDateInputProps}\r\n                            placeholder='Start date'\r\n                        />\r\n                        <span className='date-range_arrow' />\r\n                        <input\r\n                            className={'input' + (focus === END_DATE ? ' -focused' : '')}\r\n                            {...endDateInputProps}\r\n                            placeholder='End date'\r\n                        />\r\n                    </div>\r\n                )}\r\n            </DateRangePicker>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateRangePickerExample","import React from 'react';\r\nimport './NavBar.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className=\"NavBar\">\r\n            <h1>CFV</h1>    \r\n            <div className=\"nav-bar\">\r\n                <NavLink\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"nav-link-active\"\r\n                    exact\r\n                    to=\"/\">Map\r\n                </NavLink>\r\n\r\n                <NavLink\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"nav-link-active\"\r\n                    to=\"/about\">About\r\n                </NavLink>\r\n\r\n                <NavLink\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"nav-link-active\"\r\n                    to=\"/exportdata\">ExportData\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import '../index.css';\r\nimport '../App.css';\r\nimport '../components/Globe.css'\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/animations/scale.css';\r\nimport Costa_Rica_Historic from '../components/Costa_Rica_Historic.js';\r\nimport Nicaragua_Historic from '../components/Nicaragua_Historic.js';\r\nimport Mexico_Historic from '../components/Mexico_Historic.js';\r\nimport El_Salvador_Historic from '../components/El_Salvador_Historic.js'\r\nimport {SimpleGlobe} from '../components/Globe'\r\nimport DateTimePicker from '../components/DateTimePicker'\r\nimport NavBar from '../components/NavBar'\r\nimport React from 'react';\r\nimport ReactAudioPlayer from 'react-audio-player';\r\nconst {date_to_string, date_to_stringUS, date_to_week, date_to_weekUS, date_to_weekJS}  = require('../components/DateToWeek');\r\n\r\nconst axios = require('axios');\r\n\r\nexport class LandingPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let today = new Date();\r\n        today.setDate(today.getDate() - 7);\r\n        var todaySTR = date_to_weekUS(today.toLocaleDateString());\r\n        var dateParts = todaySTR.split(\"/\");\r\n        var start = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n\r\n        var end = new Date(start.getFullYear(), start.getMonth(), start.getDate() + 6)\r\n\r\n        this.state = {\r\n            loading: true,\r\n            //Used to indicate whether new data is being processed or not\r\n            fetchingData: false,\r\n            clicked: \"none\",\r\n            volume: 0.33,\r\n            //GLOBE settings\r\n            //value is abitrary and represents size\r\n            globe_markers: [\r\n                {\r\n                    id: 'ElSalvador',\r\n                    country: 'El Salvador',\r\n                    color: 'red',\r\n                    coordinates: [13.598871, -88.909731],\r\n                    value: 20,\r\n                },\r\n                {\r\n                    id: 'Nicaragua',\r\n                    country: 'Nicaragua',\r\n                    color: 'gold',\r\n                    coordinates: [12.793830, -84.854074],\r\n                    value: 20,\r\n                },\r\n                {\r\n                    id: 'Mexico',\r\n                    country: 'Mexico',\r\n                    color: 'orange',\r\n                    coordinates: [23.502654, -102.227797],\r\n                    value: 20,\r\n                },\r\n                {\r\n                    id: 'CostaRica',\r\n                    country: 'Costa Rica',\r\n                    color: 'green',\r\n                    coordinates: [10.031846, -83.896692],\r\n                    value: 20,\r\n                }\r\n            ],\r\n            // simple and extensive options to configure globe here:\r\n            // https://github.com/chrisrzhou/react-globe/blob/main/docs/props.mdx\r\n            globe_options: {\r\n                ambientLightColor: 'white',\r\n                ambientLightIntensity: 0.15,\r\n                enableDefocus: false,\r\n                cameraRotateSpeed: 0.25,\r\n                cameraZoomSpeed: 1.5,\r\n                cameraAutoRotateSpeed: 0.025,\r\n                focusAnimationDuration: 1750,\r\n                focusDistanceRadiusScale: 1.75,\r\n                focusEasingFunction: ['Quintic', 'InOut'],\r\n                globeGlowPower: 5,\r\n                globeCloudsOpacity: 0.8,\r\n                enableMarkerGlow: true,\r\n                markerGlowCoefficient: 0.5,\r\n                markerGlowPower: 1.2,\r\n                pointLightColor: 'white',\r\n                pointLightIntensity: 1.0,\r\n                pointLightPositionRadiusScales: [-1500, 500, 1500],\r\n                markerType: 'dot',\r\n                markerTooltipRenderer: marker => `${marker.country}`,\r\n            },\r\n            country_data: {\r\n                \"ElSalvador\" : {\r\n                    \"Historic\" : null,\r\n                    \"Forecast\" : null,\r\n                },\r\n                \"Mexico\" : {\r\n                    \"Historic\" : null,\r\n                    \"Forecast\" : null,\r\n                },\r\n                \"Nicaragua\" : {\r\n                    \"Historic\" : null,\r\n                    \"Forecast\" : null,\r\n                },\r\n                \"CostaRica\" : {\r\n                    \"Historic\" : null,\r\n                    \"Forecast\" : null,\r\n                },\r\n            },\r\n            startDate: start,\r\n            endDate: end\r\n        }\r\n        this.onClickMarker = this.onClickMarker.bind(this);\r\n        this.changeStartDate = this.changeStartDate.bind(this);\r\n        this.changeEndDate = this.changeEndDate.bind(this);\r\n    }\r\n\r\n    /**\r\n     * 'onClick' event for globe\r\n     * gets a marker, object, and event\r\n     * @param {*} marker \r\n     * @param {*} markerObject \r\n     * @param {*} event \r\n     */\r\n    onClickMarker(marker, markerObject, event) {\r\n        this.setState({fetchingData: true})\r\n        let audio = new Audio(\"audio/wind.mp3\")\r\n        audio.volume = this.state.volume\r\n        audio.play();\r\n        const country_id = marker['id'];\r\n        this.queryData(country_id, date_to_stringUS(this.state.startDate), date_to_stringUS(this.state.endDate))\r\n        this.setState({clicked: country_id});\r\n    }\r\n\r\n    /**\r\n     * event passing for datepicker\r\n     * @param {*} date \r\n     */\r\n    changeStartDate(date){\r\n        this.setState({startDate: date});\r\n        if(this.state.clicked != \"none\"){\r\n            this.queryData(this.state.clicked, date_to_stringUS(this.state.startDate), date_to_stringUS(this.state.endDate));\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * event passing for datepicker\r\n     * @param {*} date \r\n     */\r\n    changeEndDate(date){\r\n        this.setState({endDate: date});\r\n        if(this.state.clicked != \"none\"){\r\n            this.queryData(this.state.clicked, date_to_stringUS(this.state.startDate), date_to_stringUS(this.state.endDate));\r\n        }\r\n    }\r\n\r\n    async queryData(country_string, start_date, end_date)\r\n    {\r\n        const config = {\r\n            'Content-Type':'application/json'\r\n        }\r\n        \r\n        // date_range example:\r\n        // This expects both parameters to be in the form:\r\n        //  MM/DD/YYYY\r\n        const body  = {\r\n            date_range: [start_date, end_date]\r\n        }\r\n\r\n        // Use one of these in this body\r\n        // dateUS -> 'mm/dd/yyyy'\r\n        // date -> 'dd/mm/yyyy'\r\n        // dateJS -> JS Date object\r\n\r\n        // These are all equivalent\r\n        // const body  = {\r\n        //     dateUS: '01/09/2019'\r\n        // }\r\n        // const body  = {\r\n        //     date: '09/01/2019'\r\n        // }\r\n        // const body  = {\r\n        //     dateJS: new Date(2019, 1, 9)\r\n        // }\r\n\r\n        const res = await axios.post(\r\n            `/query/${country_string}`,\r\n            body,\r\n            config\r\n        );\r\n\r\n        if(res.status === 200) {\r\n            let copy = this.state.country_data\r\n            let hist = res.data['Historic'];\r\n            let forecast = res.data['Forecast'];\r\n            copy[country_string]['Historic'] = hist;\r\n            copy[country_string]['Forecast'] = forecast;\r\n            this.setState({country_data: copy});\r\n        }\r\n        this.setState({fetchingData: false})\r\n    }\r\n\r\n    volumeChangeEvent(volume){\r\n        this.setState({volume: volume});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            globe: new SimpleGlobe(\r\n                {\r\n                    markerClick: this.onClickMarker,\r\n                    markers: this.state.globe_markers,\r\n                    options: this.state.globe_options,\r\n                    initialCoordinates: [17.4921, -84.0852]\r\n                }\r\n            ).getGlobe()\r\n        });\r\n        this.setState({loading: false})\r\n    }\r\n\r\n    graph(){\r\n        if(this.state.clicked === \"Mexico\"){\r\n            return(\r\n                <Mexico_Historic\r\n                    dataFromParent={this.state.country_data['Mexico']}\r\n                    startDate={this.state.startDate}\r\n                    endDate={this.state.endDate}\r\n                />\r\n            )\r\n        }\r\n        else if(this.state.clicked === \"ElSalvador\"){\r\n            return(\r\n                <El_Salvador_Historic\r\n                    dataFromParent={this.state.country_data['ElSalvador']}\r\n                    startDate={this.state.startDate}\r\n                    endDate={this.state.endDate}\r\n                />\r\n            )\r\n        }\r\n        else if(this.state.clicked === \"CostaRica\"){\r\n            return(\r\n                <Costa_Rica_Historic\r\n                    dataFromParent={this.state.country_data['CostaRica']}\r\n                    startDate={this.state.startDate}\r\n                    endDate={this.state.endDate}\r\n                />\r\n            )\r\n        }\r\n        else if(this.state.clicked === \"Nicaragua\"){\r\n            return(\r\n                <Nicaragua_Historic\r\n                    dataFromParent={this.state.country_data['Nicaragua']}\r\n                    startDate={this.state.startDate}\r\n                    endDate={this.state.endDate}\r\n                />\r\n            )\r\n        }\r\n        else{\r\n            return <div className=\"country-plotly\"/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.loading){\r\n            return (\r\n                <div>\r\n                    <div className=\"globe\">\r\n                        <NavBar/>\r\n                        {DateTimePicker(this.state.startDate, this.state.endDate, this.changeStartDate, this.changeEndDate)}\r\n                        <ReactAudioPlayer\r\n                            src=\"audio/Distant-Mountains.mp3\"\r\n                            controls\r\n                            autoPlay\r\n                            loop\r\n                            muted={false}\r\n                            volume={this.state.volume}\r\n                            onVolumeChanged={(e) => e['path'][0].muted ? this.volumeChangeEvent(0) : this.volumeChangeEvent(e['path'][0].volume)}\r\n                        />\r\n                        {this.graph()}\r\n                        {this.state.globe}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <div>Loading........</div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default LandingPage","export default __webpack_public_path__ + \"static/media/Max.23b782d0.jpg\";","export default __webpack_public_path__ + \"static/media/Vitaliy.bc6f6152.jpeg\";","export default __webpack_public_path__ + \"static/media/Andre.64e8d9b0.jpeg\";","export default __webpack_public_path__ + \"static/media/Naoki.c1e7a641.jpg\";","import '../index.css';\r\nimport '../App.css';\r\nimport React from 'react';\r\nimport Max from \"../images/Max.jpg\";\r\nimport NavBar from \"../components/NavBar\"\r\nimport Vitaliy from \"../images/Vitaliy.jpeg\";\r\nimport Andre from \"../images/Andre.jpeg\";\r\nimport Naoki from \"../images/Naoki.jpg\";\r\n\r\nexport class About extends React.Component {\r\n  render() {\r\n  \treturn (\r\n\t\t\t<div>\r\n\t\t\t<NavBar />\r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\t\t\t\t{/*\r\n\t\t\t\tI got rid of this bc it was messing with nav bar\r\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif; \r\n\t\t\t\t*/}\r\n\t\t\t\t<style dangerouslySetInnerHTML={{__html: \"\\nbody {\\n  margin: 0;\\n}\\n\\nhtml {\\n  box-sizing: border-box;\\n}\\n\\n*, *:before, *:after {\\n  box-sizing: inherit;\\n}\\n\\n.column {\\n  float: left;\\n  width: 33.3%;\\n  margin-bottom: 16px;\\n  padding: 0 8px;\\n}\\n\\n.card {\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\\n  margin: 8px;\\n}\\n\\n.about-section {\\n  padding: 50px;\\n  text-align: center;\\n  background-color: #474e5d;\\n  color: white;\\n}\\n\\n.container {\\n  padding: 0 16px;\\n}\\n\\n.container::after, .row::after {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table;\\n}\\n\\n.title {\\n  color: grey;\\n}\\n\\n.button {\\n  border: none;\\n  outline: 0;\\n  display: inline-block;\\n  padding: 8px;\\n  color: white;\\n  background-color: #000;\\n  text-align: center;\\n  cursor: pointer;\\n  width: 100%;\\n}\\n\\n.button:hover {\\n  background-color: #555;\\n}\\n\\n@media screen and (max-width: 650px) {\\n  .column {\\n    width: 100%;\\n    display: block;\\n  }\\n}\\n\" }} />\r\n\t\t\t\t<div className=\"about-section\">\r\n\t\t\t\t\t<h1>Our Mission</h1>\r\n\t\t\t\t\t<p>We are  team of bellevue college students who have teamed up with WattTime</p>\r\n\t\t\t\t\t<p>to help gather electrical generation data of the worlds nations. We aim to</p>\r\n\t\t\t\t\t<p>provide consumers, buisnesses and researchers alike with accurate information</p>\r\n\t\t\t\t\t<p>to allow them to make more eco-conscious decisions.</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2 style={{textAlign: 'center'}}>Our Team</h2>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t<img src={Max} alt=\"Max\" style={{width: '100%'}} />\r\n\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t<h2>Max Ayala</h2>\r\n\t\t\t\t\t\t\t\t<p className=\"title\">Software Engineer</p>\r\n\t\t\t\t\t\t\t\t<p>Some text that describes me lorem ipsum ipsum lorem.</p>\r\n\t\t\t\t\t\t\t\t<p>max@email.edu</p>\r\n\t\t\t\t\t\t\t\t<p><button className=\"button\">Contact</button></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t<img src={Vitaliy} alt=\"Vitaliy\" style={{width: '100%'}} />\r\n\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t<h2>Vitaliy Stepanov</h2>\r\n\t\t\t\t\t\t\t\t<p className=\"title\">Software Engineer</p>\r\n\t\t\t\t\t\t\t\t<p>Some text that describes me lorem ipsum ipsum lorem.</p>\r\n\t\t\t\t\t\t\t\t<p>vitaliy@email.edu</p>\r\n\t\t\t\t\t\t\t\t<p><button className=\"button\">Contact</button></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t<img src={Naoki} alt=\"Naoki\" style={{width: '100%'}} />\r\n\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t<h2>Naoki Lucas</h2>\r\n\t\t\t\t\t\t\t\t<p className=\"title\">Software Engineer</p>\r\n\t\t\t\t\t\t\t\t<p>Some text that describes me lorem ipsum ipsum lorem.</p>\r\n\t\t\t\t\t\t\t\t<p>naoki@email.edu</p>\r\n\t\t\t\t\t\t\t\t<p><button className=\"button\">Contact</button></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"column\">\r\n\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t<img src={Andre} alt=\"Andre\" style={{width: '100%'}} />\r\n\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t<h2>Andre Weertman</h2>\r\n\t\t\t\t\t\t\t\t<p className=\"title\">Software Engineer</p>\r\n\t\t\t\t\t\t\t\t<p>Some text that describes me lorem ipsum ipsum lorem.</p>\r\n\t\t\t\t\t\t\t\t<p>andre@email.com</p>\r\n\t\t\t\t\t\t\t\t<p><button className=\"button\">Contact</button></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About","import '../index.css';\r\nimport '../App.css';\r\nimport React from 'react';\r\nimport NavBar from '../components/NavBar'\r\n\r\nexport class ExportData extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar />\r\n                <h1><br/>coming soon...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExportData","import './App.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport {LandingPage} from './pages/LandingPage';\r\nimport {About} from './pages/About';\r\nimport {ExportData} from './pages/ExportData';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Route exact path ='/' component = {LandingPage}/>\r\n          <Route exact path ='/about' component = {About}/>\r\n          <Route exact path ='/exportdata' component = {ExportData}/>\r\n        </Router>      \r\n    </div>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App/>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const start_date = \"12/27/2016\"\r\n\r\n/**\r\n * Converts **en-US mm/dd/yyyy** date to needed doc ID \r\n * @param {*} date_str \r\n */\r\nmodule.exports.date_to_weekUS = (date_str) => {\r\n    const start = new Date(start_date);\r\n    const current = new Date(date_str);\r\n    const diffTime = Math.abs(current - start);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) % 7; \r\n    current.setDate(current.getDate() - diffDays);\r\n    var year = Intl.DateTimeFormat('en', {year: 'numeric'}).format(current);\r\n    var month = Intl.DateTimeFormat('en', {month: '2-digit'}).format(current);\r\n    var day = Intl.DateTimeFormat('en', {day: '2-digit'}).format(current);\r\n    return `${day}/${month}/${year}`\r\n}\r\n\r\n/**\r\n * Converts **JS date object** to needed doc ID \r\n * @param {*} date \r\n */\r\n module.exports.date_to_weekJS = (date) => {\r\n    const start = new Date(start_date);\r\n    const current = new Date(date);\r\n    const diffTime = Math.abs(current - start);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) % 7; \r\n    current.setDate(current.getDate() - diffDays);\r\n    var year = Intl.DateTimeFormat('en', {year: 'numeric'}).format(current);\r\n    var month = Intl.DateTimeFormat('en', {month: '2-digit'}).format(current);\r\n    var day = Intl.DateTimeFormat('en', {day: '2-digit'}).format(current);\r\n    return `${day}/${month}/${year}`\r\n}\r\n\r\n/**\r\n * Converts **dd/mm/yyyy** date to needed doc ID \r\n * @param {*} date_str \r\n */\r\nmodule.exports.date_to_week = (date_str) => {\r\n    const start = new Date(start_date);\r\n    const dateParts = date_str.split(\"/\");\r\n    // month is 0-based, that's why we need dataParts[1] - 1\r\n    const current = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]); \r\n    const diffTime = Math.abs(current - start);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) % 7; \r\n    current.setDate(current.getDate() - diffDays);\r\n    var year = Intl.DateTimeFormat('en', {year: 'numeric'}).format(current);\r\n    var month = Intl.DateTimeFormat('en', {month: '2-digit'}).format(current);\r\n    var day = Intl.DateTimeFormat('en', {day: '2-digit'}).format(current);\r\n    return `${day}/${month}/${year}`\r\n}\r\n\r\nmodule.exports.date_to_stringUS = (date) => {\r\n    try{\r\n        var dd = String(date.getDate()).padStart(2, '0');\r\n        var mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = date.getFullYear();\r\n    \r\n        return (mm + '/' + dd + '/' + yyyy);\r\n    }catch (err){\r\n        console.log(err)\r\n        return null\r\n    }\r\n}\r\n\r\nmodule.exports.date_to_string = (date) => {\r\n    try{\r\n        var dd = String(date.getDate()).padStart(2, '0');\r\n        var mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = date.getFullYear();\r\n\r\n        return (dd + '/' + mm + '/' + yyyy);\r\n    }catch (err){\r\n        console.log(err)\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * Simple helper to turn our 'hh-dd/mm/yyyy' formated date strings\r\n * into date objects\r\n * \r\n * @param {*} string \r\n * @returns \r\n */\r\n module.exports.str_to_date = (string) => {\r\n    let split = string.split('-');\r\n    var hh = parseInt(split[0]);\r\n    var date_str = split[1];\r\n    var date_split = date_str.split('/');\r\n    var dd = parseInt(date_split[0]);\r\n    var mm = parseInt(date_split[1] - 1);\r\n    var yyyy = parseInt(date_split[2]);\r\n    return new Date(yyyy, mm, dd, hh)\r\n}"],"sourceRoot":""}